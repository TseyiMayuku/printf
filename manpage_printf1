.TH man _printf "17th October 2022"

.SH NAME

.B _printf

- formatted output conversion

.SH SYNOPSIS

.nf

.BI printf (FORMAT, ARGUMENT)...

.PP

.BI "#include <stdarg.h>"

.BI "#include <stdio.h>"

.BI "#include <unistd.h>"

.PP

.BI "int print_char(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_string(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_percent(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_int(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_binary(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_unsigned(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_octal(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_hexadecimal(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_hexa_upper(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_hexa(va_list types, char map_to[],

char buffer[], int flags, char flag_ch, int width, int precision, int size);"

.BI "int print_non_printable(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_pointer(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int get_flags(const char *format, int *i);"

.BI "int get_width(const char *format, int *i, va_list list);"

.BI "int get_precision(const char *format, int *i, va_list list);"

.BI "int get_size(const char *format, int *i);"

.BI "int print_reverse(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int print_rot13string(va_list types, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int handle_write_char(char c, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int write_number(int is_positive, int ind, char buffer[],

        int flags, int width, int precision, int size);"

.BI "int write_num(int ind, char bff[], int flags, int width, int precision,

        int length, char padd, char extra_c);"

.BI "int write_pointer(char buffer[], int ind, int length,

        int width, int flags, char padd, char extra_c, int padd_start);"

.BI "int write_unsgnd(int is_negative, int ind,

char buffer[],

        int flags, int width, int precision, int size);"

.BI "int is_printable(char);"

.BI "int append_hexa_code(char, char[], int);"

.BI "int is_digit(char);"

.BI "long int convert_size_number(long int num, int size);"

.BI "long int convert_size_unsgnd(unsigned long int num, int size);"

.PP

.SH DESCRIPTION

The function _printf is a variadic function that produces a string according to a

.I format

and printsit to the standard output, much like the C standard library function printf.It can receive a variable number of arguments.

 

.SH RETURN VALUE

Returns the number of all the characters printed, excluding the NULL byte used to end output to strings.

.SH Format String Format

The format string is a character string, which contains two types of directives: ordinary characters which are copied to the output stream; and conversion specifiers. Each conversion specification is introduced by the character %, and ends with a conversion specifier.

.SH Conversion Specifiers

This are the characters that specifies the type of conversion to be applied. The conversion specifiers and their meanings are:

.TP

.B c

.R The \fIint\fR argument is converted to an \fIunsigned char\fR, and the resulting character is written.

.TP

.B s

.R The \fIconst char *\fR argument is a pointer to an array of characters, that converts the corresponding argument to a character string.

.TP

.B d, i

.R The \fIint\fR argument is converted to signed decimal notation.

.TP

.B o, u, x, X

.R The \fIunsigned int\fR argument is converted to unsigned octal \fIo\fR (base 8 number), unsigned decimal \fIu\fR (base 10 number), unsigned hexadecimal \fIx\fR (base 16 number with lowercase letters) and unsigned hexadecimal \fIX\fR (base 16 number with uppercase letters).

.TP

.B %, %%

.R If only the \fI%\fR character is written no argument is converted. The complete conversion specification is \fI%%\fR, that returns the actual sign if there in front.

.TP

.B S

.R The \fIconst char\fR argument is a pointer to an array of characters, that converts the corresponding argument to a character st\

ring, with non-printable characters (0 < ASCII value < 32 or >= 127).

.TP

.B p

.R The \fIvoid * pointer\fR argument is printed in hexadecimal.

.TP

.B S

.R The \fIconst char\fR argument is a pointer to an array

.SH The flag characters

The character \fI%\fR is followed by zero the following flags:

.TP

.B +

.R A sign \fI+\fR or \fI-\fR will be placed before a number followed by a signed conversion.

.TP

.B #

.R Print number in hexadecimal, upeercase hexadecimal and octal where the first character of the output string is made zero.

.TP

.B ' '

.R A space in blank should be left before a positive number followed by a signed conversion.

.SH NOTES.R A space in blank should be left before a positive number followed by a signed conversion.

.SH NOTES

.R The \fB_printf()\fR is a project collaboration between \Tolulope Fakunle\fR and \Bamidele Adefolaju\fR, actual students of Software Engineering at \fB Alx\fR.

.SH BUGS

.R In process

.SH EXAMPLE

.R To print the the string \fBHello Alx!\fR and its length in decimal.

 

#include ''main.h''
 

int main(void)
{

        int length;

 
        _printf(''%s'', ''Hello, Alx!'')

        _printf(''Hello Alx! contains %d characters'', length);

        length = _printf(''Hello Alx!'');

        return (0);

}

.SH SEE ALSO

.R printf(3)

.SH AUTHORS

Oritsetseyigbemi Mayuku(mayukutseyi@gmail.com) and Bismark Amuna(bismarkamuna007@gmail.com)
